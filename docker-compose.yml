version: '3.8'

services:
  # Frontend React application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - NODE_ENV=development
    networks:
      - app-network

  # Backend Node.js API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/rehearsal_scheduler
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
      - JWT_EXPIRES_IN=1d
      - SENDGRID_API_KEY=your_sendgrid_api_key
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - TWILIO_PHONE_NUMBER=your_twilio_phone_number
    networks:
      - app-network

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rehearsal_scheduler
    networks:
      - app-network

  # Redis for caching and session management
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Adminer for database management (optional)
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge